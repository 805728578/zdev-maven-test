<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">


	<!-- <context:component-scan base-package="com.dev.share.*" />
	<context:annotation-config />
	<aop:aspectj-autoproxy />
	<tx:annotation-driven /> -->
	<context:property-placeholder location="classpath*:*.properties"/>
	<bean class="com.dev.share.spring.SpringContextHolder" lazy-init="false"/>
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:kafka.properties</value>
			</list>
		</property>
	</bean>
	<import resource="classpath:spring-kafka.xml"/>
	<import resource="classpath:spring-cache.xml"/>
	<bean class="org.springframework.context.support.ClassPathXmlApplicationContext">
		<constructor-arg name="configLocation" value="#{${kafka.enabled}?'classpath:spring-kafka.xml':'classpath:servlet-context.xml'}"/>
	</bean>
	<!-- 目标数据源配置 -->
<!-- 	<bean id="mainDataSource" class="com.alibaba.druid.pool.xa.DruidXADataSource" destroy-method="close">
		基本属性 url、user、password
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />

		配置初始化大小、最小、最大
		<property name="initialSize" value="20" />
		<property name="minIdle" value="50" />
		<property name="maxActive" value="100" />

		配置获取连接等待超时的时间
		<property name="maxWait" value="600000" />

		配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
		<property name="timeBetweenEvictionRunsMillis" value="600000" />

		配置一个连接在池中最小生存的时间，单位是毫秒
		<property name="minEvictableIdleTimeMillis" value="600000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		打开PSCache，并且指定每个连接上PSCache的大小
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		配置监控统计拦截的filters
		<property name="filters" value="stat,log4j" />

		打开removeAbandoned功能,如果连接超过30分钟未关闭，就会被强行回收，并且日志记录连接申请时输出错误日志
		<property name="removeAbandoned" value="true" /> 打开removeAbandoned功能
		<property name="removeAbandonedTimeout" value="1800" /> 1800秒，也就是30分钟
		<property name="logAbandoned" value="true" /> 关闭abanded连接时输出错误日志
		合并多个DruidDataSource的监控数据
		<property name="useGlobalDataSourceStat" value="true" />
	</bean> -->
	<!-- 数据源配置 -->
	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
		<property name="targetDataSource" ref="mainDataSource" />
	</bean>
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean> -->
	<!-- 配置Druid和Spring关联监控配置 -->
	<!-- <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" />
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="pattern" value=".*service.*" />
	</bean>
	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="druid-stat-interceptor"
			pointcut-ref="druid-stat-pointcut" />
	</aop:config> -->

</beans>
